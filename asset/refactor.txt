リファクタリング実践ガイド：ステップ・バイ・ステップ（手順のみ）
このガイドは、コードを記述する前の手順書としてお使いください。

ステップ0: 準備
まず、作業を始める前に安全な状態を確保します。

プロジェクトのバックアップ: 現在のプロジェクトをコピーしてバックアップを取るか、Gitで新しいブランチを作成します。
空のスクリプトファイル作成: Godotエディタのファイルシステムパネルで、以下の3つの新しいGDScriptファイルを作成します。
fdtd_engine.gd
simulation_view.gd
main_controller.gd
▶ このステップでの確認ポイント:

ファイルシステムパネルに、3つの新しいスクリプトファイルが存在することを確認します。
ステップ1: 計算ロジックの分離 (FDTDEngine の作成)
シミュレーションの計算部分だけを独立させます。

fdtd_engine.gd の設定:
このスクリプトが Resource を継承するように設定します。
ファイルの先頭に class_name FDTDEngine と記述し、クラスとして登録します。
コードの移動:
元の FDTDSimulator.gd から、計算にのみ関連する変数（width, height, ez, hx, hy, time など）と関数（initialize の中身、step の中身、add_source）を fdtd_engine.gd にコピー＆ペーストします。
インターフェースの作成:
計算結果（電場データ）を外部から取得できるように、get_field_data() という新しい関数を定義します。
▶ このステップでの確認ポイント:

fdtd_engine.gd を保存した際に、Godotエディタでエラーが表示されないことを確認します。
この時点では、まだプロジェクトを実行しても何も起こりません。
ステップ2: 司令塔のセットアップ (MainController の準備)
全体の流れを制御する司令塔を準備し、裏側で計算が動くようにします。

スクリプトの差し替え:
シーンツリーで、ルートノード（FDTDSimulator という名前のノード）を選択します。
インスペクタで、アタッチされているスクリプトを FDTDSimulator.gd から main_controller.gd に変更します。
main_controller.gd の編集:
_ready 関数内で、ステップ1で作成した FDTDEngine をインスタンス化し、初期化する処理を記述します。
_process 関数内で、FDTDEngine の step 関数を呼び出す処理を記述します。
_input 関数内で、マウスクリックを検知し、FDTDEngine の add_source 関数を呼び出す処理を記述します。
動作確認のため、_ready や _process、_input の中で、処理が実行されたことがわかるようなメッセージをコンソールに出力する処理（print文）を追加します。
▶ このステップでの確認ポイント:

プロジェクトを実行（F5キー）します。
Godotの「出力」パネルに、初期化や計算ステップ、クリック時のメッセージが意図通りに表示されることを確認します。
この時点では画面に変化はありませんが、コンソールの出力で計算が動いていることが確認できれば成功です。
ステップ3: 描画担当の分離 (SimulationView の作成)
計算結果を画面に表示する部分を独立させます。

スクリプトのアタッチ:
シーンツリーで、描画に使っている TextureRect ノードを選択します。
インスペクタで、このノードに simulation_view.gd スクリプトをアタッチします。
コードの移動:
元の FDTDSimulator.gd から、描画にのみ関連するコード（Image や ImageTexture の作成、テクスチャの更新処理など）を simulation_view.gd にコピー＆ペーストします。
関数の整理:
コピーした描画処理を update_view() という新しい関数の中にまとめます。
Image や ImageTexture の初期化処理を initialize_view() という新しい関数の中にまとめます。
▶ このステップでの確認ポイント:

simulation_view.gd を保存した際に、エラーが表示されないことを確認します。
この時点ではまだ MainController と連携していないため、実行しても何も変化はありません。
ステップ4: 全コンポーネントの連携
司令塔、計算エンジン、描画担当の3つをつなぎ合わせ、全体を完成させます。

main_controller.gd の最終調整:
MainController が SimulationView（TextureRect ノード）を認識できるように、@onready を使ってノードへの参照を保持する変数を定義します。
_ready 関数に、SimulationView の initialize_view() を呼び出し、さらに FDTDEngine の参照を SimulationView に渡す処理を追加します。
_process 関数に、SimulationView の update_view() を呼び出す処理を追加します。
ステップ2で追加したデバッグ用の print 文を削除またはコメントアウトします。
▶ このステップでの確認ポイント:

プロジェクトを実行（F5キー）します。
以前のアプリケーションと全く同じように、画面をクリックすると波紋が広がる様子が描画されることを確認します。
これが確認できれば、リファクタリングは成功です。
ステップ5: クリーンアップ
最後にプロジェクトを整理します。

古いファイルの削除:
すべてが正常に動作することを確認したら、ファイルシステムパネルから不要になった FDTDSimulator.gd ファイルを削除します。
コードの整理:
各スクリプトに残っている不要なコメントやデバッグ用のコードを整理します。